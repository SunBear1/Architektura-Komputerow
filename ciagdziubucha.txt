.686
.model flat
extern __write : PROC
extern __read : PROC
extern _ExitProcess@4 : PROC
public _main
.data
znaki db 12 dup (?)
obszar db 12 dup (?)
dekoder db '0123456789AB'
dwanascie dd 12
dwa dd 2
.code

wyswietl_EAX PROC
pusha
mov esi, 3 ; indeks w tablicy 'znaki'
mov ebx, 10 ; dzielnik równy 10
cmp eax,0
jge	dodatnia
neg eax
mov znaki [0], '-'
jmp konwersja
dodatnia:
mov znaki [0], ' '
konwersja:
mov edx, 0 ; zerowanie starszej części dzielnej
div ebx ; dzielenie przez 10, reszta w EDX,
; iloraz w EAX
add dl, 30H ; zamiana reszty z dzielenia na kod
next:
; ASCII
mov znaki [esi], dl; zapisanie cyfry w kodzie ASCII
dec esi ; zmniejszenie indeksu
cmp eax, 0 ; sprawdzenie czy iloraz = 0
jne konwersja ; skok, gdy iloraz niezerowy
; wypełnienie pozostałych bajtów spacjami i wpisanie
; znaków nowego wiersza
wypeln:
or esi, esi
jz wyswietl ; skok, gdy ESI = 0
mov byte PTR znaki [esi], 20H ; kod spacji
dec esi ; zmniejszenie indeksu
jmp wypeln
wyswietl:
mov byte PTR znaki [11], 0AH ; kod nowego wiersza
; wyświetlenie cyfr na ekranie
push dword PTR 12 ; liczba wyświetlanych znaków
push dword PTR OFFSET znaki ; adres wyśw. obszaru
push dword PTR 1; numer urządzenia (ekran ma numer 1)
call __write ; wyświetlenie liczby na ekranie
add esp, 12 ; usunięcie parametrów ze stosu
popa
ret
wyswietl_EAX ENDP

_main PROC
mov ebx,0
mov eax,1
jakub:
	cmp ebx,30
	je exit
	mov edx, 0

	push eax
	mov eax,ebx
	div dwa
	pop eax
	cmp dl,0
	je plus

	;odejmowanie
	sub eax,ebx
	jmp koniec

	;dodawanie
	plus:
	add eax,ebx
	koniec:
	call wyswietl_EAX
	inc ebx
jmp jakub
exit:


push 0
call _ExitProcess@4
_main ENDP
END